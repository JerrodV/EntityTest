//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace EntityTest
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class TestPeopleEntities : DbContext
    {
        public TestPeopleEntities()
            : base("name=TestPeopleEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Person> People { get; set; }
    
        public virtual ObjectResult<GetPeople_Result> GetPeople()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPeople_Result>("GetPeople");
        }
    
        public virtual ObjectResult<GetPerson_Result> GetPerson(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPerson_Result>("GetPerson", iDParameter);
        }
    
        public virtual ObjectResult<GetPersonReport_Result> GetPersonReport(string firstNameStartsWith, string lastNameStartsWith, Nullable<System.DateTime> dOBStartDate, Nullable<System.DateTime> dOBEndDate)
        {
            var firstNameStartsWithParameter = firstNameStartsWith != null ?
                new ObjectParameter("FirstNameStartsWith", firstNameStartsWith) :
                new ObjectParameter("FirstNameStartsWith", typeof(string));
    
            var lastNameStartsWithParameter = lastNameStartsWith != null ?
                new ObjectParameter("LastNameStartsWith", lastNameStartsWith) :
                new ObjectParameter("LastNameStartsWith", typeof(string));
    
            var dOBStartDateParameter = dOBStartDate.HasValue ?
                new ObjectParameter("DOBStartDate", dOBStartDate) :
                new ObjectParameter("DOBStartDate", typeof(System.DateTime));
    
            var dOBEndDateParameter = dOBEndDate.HasValue ?
                new ObjectParameter("DOBEndDate", dOBEndDate) :
                new ObjectParameter("DOBEndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPersonReport_Result>("GetPersonReport", firstNameStartsWithParameter, lastNameStartsWithParameter, dOBStartDateParameter, dOBEndDateParameter);
        }
    
        public virtual int PersonSet(Nullable<int> iD, string firstName, string lastName, string middleInitial, Nullable<System.DateTime> dateOfBirth)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var middleInitialParameter = middleInitial != null ?
                new ObjectParameter("MiddleInitial", middleInitial) :
                new ObjectParameter("MiddleInitial", typeof(string));
    
            var dateOfBirthParameter = dateOfBirth.HasValue ?
                new ObjectParameter("DateOfBirth", dateOfBirth) :
                new ObjectParameter("DateOfBirth", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PersonSet", iDParameter, firstNameParameter, lastNameParameter, middleInitialParameter, dateOfBirthParameter);
        }
    }
}
